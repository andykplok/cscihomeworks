package hw01;

import java.util.Arrays;

/**
 * This class encapsulates a test program provided to students so that they
 * can test their implementations of the various parts of the homework. This class
 * will not test the standalone execution of each class (e.g. the main
 * method), but will instead call the required helper functions directly in
 * each of the implementation classes.
 */
public class Hw01Main {

    /**
     * A truth table for the prime numbers between 0 and 1000.
     */
    public static final int[] PRIME_TRUTH_TABLE = {
            1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1,
            1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0,
            1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1,
            1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1,
            1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0,
            1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0,
            1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1,
            1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1,
            1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0,
            1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0,
            1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
            1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1,
            1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0,
            1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
            1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0,
            1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0,
            1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
            1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1,
            1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0,
            1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0,
            1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1,
            1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0,
            1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1,
            1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
            1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
            1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1,
            1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0,
            1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0,
            1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
            1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1,
            1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
            1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
            1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1
    };
    /**
     * Contains the Collatz recursiveSequence for every value of n from 0 to 99.
     */
    private static final String[] COLLATZ_SEQUENCE_TRUTH_TABLE = {
            "",
            "1",
            "2 1",
            "3 10 5 16 8 4 2 1",
            "4 2 1",
            "5 16 8 4 2 1",
            "6 3 10 5 16 8 4 2 1",
            "7 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1",
            "8 4 2 1",
            "9 28 14 7 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1",
            "10 5 16 8 4 2 1",
            "11 34 17 52 26 13 40 20 10 5 16 8 4 2 1",
            "12 6 3 10 5 16 8 4 2 1",
            "13 40 20 10 5 16 8 4 2 1",
            "14 7 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1",
            "15 46 23 70 35 106 53 160 80 40 20 10 5 16 8 4 2 1",
            "16 8 4 2 1",
            "17 52 26 13 40 20 10 5 16 8 4 2 1",
            "18 9 28 14 7 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1",
            "19 58 29 88 44 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1",
            "20 10 5 16 8 4 2 1",
            "21 64 32 16 8 4 2 1",
            "22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1",
            "23 70 35 106 53 160 80 40 20 10 5 16 8 4 2 1",
            "24 12 6 3 10 5 16 8 4 2 1",
            "25 76 38 19 58 29 88 44 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1",
            "26 13 40 20 10 5 16 8 4 2 1",
            "27 82 41 124 62 31 94 47 142 71 214 107 322 161 484 242 121 364 182 91 274 137 412 206 103 310 155 466 233 700 350 175 526 263 790 395 1186 593 1780 890 445 1336 668 334 167 502 251 754 377 1132 566 283 850 425 1276 638 319 958 479 1438 719 2158 1079 3238 1619 4858 2429 7288 3644 1822 911 2734 1367 4102 2051 6154 3077 9232 4616 2308 1154 577 1732 866 433 1300 650 325 976 488 244 122 61 184 92 46 23 70 35 106 53 160 80 40 20 10 5 16 8 4 2 1",
            "28 14 7 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1",
            "29 88 44 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1",
            "30 15 46 23 70 35 106 53 160 80 40 20 10 5 16 8 4 2 1",
            "31 94 47 142 71 214 107 322 161 484 242 121 364 182 91 274 137 412 206 103 310 155 466 233 700 350 175 526 263 790 395 1186 593 1780 890 445 1336 668 334 167 502 251 754 377 1132 566 283 850 425 1276 638 319 958 479 1438 719 2158 1079 3238 1619 4858 2429 7288 3644 1822 911 2734 1367 4102 2051 6154 3077 9232 4616 2308 1154 577 1732 866 433 1300 650 325 976 488 244 122 61 184 92 46 23 70 35 106 53 160 80 40 20 10 5 16 8 4 2 1",
            "32 16 8 4 2 1",
            "33 100 50 25 76 38 19 58 29 88 44 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1",
            "34 17 52 26 13 40 20 10 5 16 8 4 2 1",
            "35 106 53 160 80 40 20 10 5 16 8 4 2 1",
            "36 18 9 28 14 7 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1",
            "37 112 56 28 14 7 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1",
            "38 19 58 29 88 44 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1",
            "39 118 59 178 89 268 134 67 202 101 304 152 76 38 19 58 29 88 44 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1",
            "40 20 10 5 16 8 4 2 1",
            "41 124 62 31 94 47 142 71 214 107 322 161 484 242 121 364 182 91 274 137 412 206 103 310 155 466 233 700 350 175 526 263 790 395 1186 593 1780 890 445 1336 668 334 167 502 251 754 377 1132 566 283 850 425 1276 638 319 958 479 1438 719 2158 1079 3238 1619 4858 2429 7288 3644 1822 911 2734 1367 4102 2051 6154 3077 9232 4616 2308 1154 577 1732 866 433 1300 650 325 976 488 244 122 61 184 92 46 23 70 35 106 53 160 80 40 20 10 5 16 8 4 2 1",
            "42 21 64 32 16 8 4 2 1",
            "43 130 65 196 98 49 148 74 37 112 56 28 14 7 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1",
            "44 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1",
            "45 136 68 34 17 52 26 13 40 20 10 5 16 8 4 2 1",
            "46 23 70 35 106 53 160 80 40 20 10 5 16 8 4 2 1",
            "47 142 71 214 107 322 161 484 242 121 364 182 91 274 137 412 206 103 310 155 466 233 700 350 175 526 263 790 395 1186 593 1780 890 445 1336 668 334 167 502 251 754 377 1132 566 283 850 425 1276 638 319 958 479 1438 719 2158 1079 3238 1619 4858 2429 7288 3644 1822 911 2734 1367 4102 2051 6154 3077 9232 4616 2308 1154 577 1732 866 433 1300 650 325 976 488 244 122 61 184 92 46 23 70 35 106 53 160 80 40 20 10 5 16 8 4 2 1",
            "48 24 12 6 3 10 5 16 8 4 2 1",
            "49 148 74 37 112 56 28 14 7 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1",
            "50 25 76 38 19 58 29 88 44 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1",
            "51 154 77 232 116 58 29 88 44 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1",
            "52 26 13 40 20 10 5 16 8 4 2 1",
            "53 160 80 40 20 10 5 16 8 4 2 1",
            "54 27 82 41 124 62 31 94 47 142 71 214 107 322 161 484 242 121 364 182 91 274 137 412 206 103 310 155 466 233 700 350 175 526 263 790 395 1186 593 1780 890 445 1336 668 334 167 502 251 754 377 1132 566 283 850 425 1276 638 319 958 479 1438 719 2158 1079 3238 1619 4858 2429 7288 3644 1822 911 2734 1367 4102 2051 6154 3077 9232 4616 2308 1154 577 1732 866 433 1300 650 325 976 488 244 122 61 184 92 46 23 70 35 106 53 160 80 40 20 10 5 16 8 4 2 1",
            "55 166 83 250 125 376 188 94 47 142 71 214 107 322 161 484 242 121 364 182 91 274 137 412 206 103 310 155 466 233 700 350 175 526 263 790 395 1186 593 1780 890 445 1336 668 334 167 502 251 754 377 1132 566 283 850 425 1276 638 319 958 479 1438 719 2158 1079 3238 1619 4858 2429 7288 3644 1822 911 2734 1367 4102 2051 6154 3077 9232 4616 2308 1154 577 1732 866 433 1300 650 325 976 488 244 122 61 184 92 46 23 70 35 106 53 160 80 40 20 10 5 16 8 4 2 1",
            "56 28 14 7 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1",
            "57 172 86 43 130 65 196 98 49 148 74 37 112 56 28 14 7 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1",
            "58 29 88 44 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1",
            "59 178 89 268 134 67 202 101 304 152 76 38 19 58 29 88 44 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1",
            "60 30 15 46 23 70 35 106 53 160 80 40 20 10 5 16 8 4 2 1",
            "61 184 92 46 23 70 35 106 53 160 80 40 20 10 5 16 8 4 2 1",
            "62 31 94 47 142 71 214 107 322 161 484 242 121 364 182 91 274 137 412 206 103 310 155 466 233 700 350 175 526 263 790 395 1186 593 1780 890 445 1336 668 334 167 502 251 754 377 1132 566 283 850 425 1276 638 319 958 479 1438 719 2158 1079 3238 1619 4858 2429 7288 3644 1822 911 2734 1367 4102 2051 6154 3077 9232 4616 2308 1154 577 1732 866 433 1300 650 325 976 488 244 122 61 184 92 46 23 70 35 106 53 160 80 40 20 10 5 16 8 4 2 1",
            "63 190 95 286 143 430 215 646 323 970 485 1456 728 364 182 91 274 137 412 206 103 310 155 466 233 700 350 175 526 263 790 395 1186 593 1780 890 445 1336 668 334 167 502 251 754 377 1132 566 283 850 425 1276 638 319 958 479 1438 719 2158 1079 3238 1619 4858 2429 7288 3644 1822 911 2734 1367 4102 2051 6154 3077 9232 4616 2308 1154 577 1732 866 433 1300 650 325 976 488 244 122 61 184 92 46 23 70 35 106 53 160 80 40 20 10 5 16 8 4 2 1",
            "64 32 16 8 4 2 1",
            "65 196 98 49 148 74 37 112 56 28 14 7 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1",
            "66 33 100 50 25 76 38 19 58 29 88 44 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1",
            "67 202 101 304 152 76 38 19 58 29 88 44 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1",
            "68 34 17 52 26 13 40 20 10 5 16 8 4 2 1",
            "69 208 104 52 26 13 40 20 10 5 16 8 4 2 1",
            "70 35 106 53 160 80 40 20 10 5 16 8 4 2 1",
            "71 214 107 322 161 484 242 121 364 182 91 274 137 412 206 103 310 155 466 233 700 350 175 526 263 790 395 1186 593 1780 890 445 1336 668 334 167 502 251 754 377 1132 566 283 850 425 1276 638 319 958 479 1438 719 2158 1079 3238 1619 4858 2429 7288 3644 1822 911 2734 1367 4102 2051 6154 3077 9232 4616 2308 1154 577 1732 866 433 1300 650 325 976 488 244 122 61 184 92 46 23 70 35 106 53 160 80 40 20 10 5 16 8 4 2 1",
            "72 36 18 9 28 14 7 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1",
            "73 220 110 55 166 83 250 125 376 188 94 47 142 71 214 107 322 161 484 242 121 364 182 91 274 137 412 206 103 310 155 466 233 700 350 175 526 263 790 395 1186 593 1780 890 445 1336 668 334 167 502 251 754 377 1132 566 283 850 425 1276 638 319 958 479 1438 719 2158 1079 3238 1619 4858 2429 7288 3644 1822 911 2734 1367 4102 2051 6154 3077 9232 4616 2308 1154 577 1732 866 433 1300 650 325 976 488 244 122 61 184 92 46 23 70 35 106 53 160 80 40 20 10 5 16 8 4 2 1",
            "74 37 112 56 28 14 7 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1",
            "75 226 113 340 170 85 256 128 64 32 16 8 4 2 1",
            "76 38 19 58 29 88 44 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1",
            "77 232 116 58 29 88 44 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1",
            "78 39 118 59 178 89 268 134 67 202 101 304 152 76 38 19 58 29 88 44 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1",
            "79 238 119 358 179 538 269 808 404 202 101 304 152 76 38 19 58 29 88 44 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1",
            "80 40 20 10 5 16 8 4 2 1",
            "81 244 122 61 184 92 46 23 70 35 106 53 160 80 40 20 10 5 16 8 4 2 1",
            "82 41 124 62 31 94 47 142 71 214 107 322 161 484 242 121 364 182 91 274 137 412 206 103 310 155 466 233 700 350 175 526 263 790 395 1186 593 1780 890 445 1336 668 334 167 502 251 754 377 1132 566 283 850 425 1276 638 319 958 479 1438 719 2158 1079 3238 1619 4858 2429 7288 3644 1822 911 2734 1367 4102 2051 6154 3077 9232 4616 2308 1154 577 1732 866 433 1300 650 325 976 488 244 122 61 184 92 46 23 70 35 106 53 160 80 40 20 10 5 16 8 4 2 1",
            "83 250 125 376 188 94 47 142 71 214 107 322 161 484 242 121 364 182 91 274 137 412 206 103 310 155 466 233 700 350 175 526 263 790 395 1186 593 1780 890 445 1336 668 334 167 502 251 754 377 1132 566 283 850 425 1276 638 319 958 479 1438 719 2158 1079 3238 1619 4858 2429 7288 3644 1822 911 2734 1367 4102 2051 6154 3077 9232 4616 2308 1154 577 1732 866 433 1300 650 325 976 488 244 122 61 184 92 46 23 70 35 106 53 160 80 40 20 10 5 16 8 4 2 1",
            "84 42 21 64 32 16 8 4 2 1",
            "85 256 128 64 32 16 8 4 2 1",
            "86 43 130 65 196 98 49 148 74 37 112 56 28 14 7 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1",
            "87 262 131 394 197 592 296 148 74 37 112 56 28 14 7 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1",
            "88 44 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1",
            "89 268 134 67 202 101 304 152 76 38 19 58 29 88 44 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1",
            "90 45 136 68 34 17 52 26 13 40 20 10 5 16 8 4 2 1",
            "91 274 137 412 206 103 310 155 466 233 700 350 175 526 263 790 395 1186 593 1780 890 445 1336 668 334 167 502 251 754 377 1132 566 283 850 425 1276 638 319 958 479 1438 719 2158 1079 3238 1619 4858 2429 7288 3644 1822 911 2734 1367 4102 2051 6154 3077 9232 4616 2308 1154 577 1732 866 433 1300 650 325 976 488 244 122 61 184 92 46 23 70 35 106 53 160 80 40 20 10 5 16 8 4 2 1",
            "92 46 23 70 35 106 53 160 80 40 20 10 5 16 8 4 2 1",
            "93 280 140 70 35 106 53 160 80 40 20 10 5 16 8 4 2 1",
            "94 47 142 71 214 107 322 161 484 242 121 364 182 91 274 137 412 206 103 310 155 466 233 700 350 175 526 263 790 395 1186 593 1780 890 445 1336 668 334 167 502 251 754 377 1132 566 283 850 425 1276 638 319 958 479 1438 719 2158 1079 3238 1619 4858 2429 7288 3644 1822 911 2734 1367 4102 2051 6154 3077 9232 4616 2308 1154 577 1732 866 433 1300 650 325 976 488 244 122 61 184 92 46 23 70 35 106 53 160 80 40 20 10 5 16 8 4 2 1",
            "95 286 143 430 215 646 323 970 485 1456 728 364 182 91 274 137 412 206 103 310 155 466 233 700 350 175 526 263 790 395 1186 593 1780 890 445 1336 668 334 167 502 251 754 377 1132 566 283 850 425 1276 638 319 958 479 1438 719 2158 1079 3238 1619 4858 2429 7288 3644 1822 911 2734 1367 4102 2051 6154 3077 9232 4616 2308 1154 577 1732 866 433 1300 650 325 976 488 244 122 61 184 92 46 23 70 35 106 53 160 80 40 20 10 5 16 8 4 2 1",
            "96 48 24 12 6 3 10 5 16 8 4 2 1",
            "97 292 146 73 220 110 55 166 83 250 125 376 188 94 47 142 71 214 107 322 161 484 242 121 364 182 91 274 137 412 206 103 310 155 466 233 700 350 175 526 263 790 395 1186 593 1780 890 445 1336 668 334 167 502 251 754 377 1132 566 283 850 425 1276 638 319 958 479 1438 719 2158 1079 3238 1619 4858 2429 7288 3644 1822 911 2734 1367 4102 2051 6154 3077 9232 4616 2308 1154 577 1732 866 433 1300 650 325 976 488 244 122 61 184 92 46 23 70 35 106 53 160 80 40 20 10 5 16 8 4 2 1",
            "98 49 148 74 37 112 56 28 14 7 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1",
            "99 298 149 448 224 112 56 28 14 7 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1"
    };
    /**
     * Sorted array of numbers to test {@link SubsetSum#pairSubsetSum(int[], int)}
     * See {@link Hw01Main#testPairSubsetSum()}
     */
    private static final int[] SORTED_ARRAY = {2, 5, 8, 10, 11, 12, 35, 61};
    /**
     * List of numbers with their subset from SORTED_ARRAY
     * See {@link Hw01Main#testPairSubsetSum()}
     */
    private static final String[] PAIR_SUBSET_SUM_TRUTH_TABLE = {
            "13 = [2, 11]",
            "40 = [5, 35]",
            "17 = [5, 12]",
            "10 = [2, 8]",
            "3 = null",
            "1 = null",
            "66 = [5, 61]"
    };

    /**
     * Tests the {@link PrimalityTest#isPrime(int)} function to verify that
     * it returns the correct result for all numbers in the range 0-1000.
     */
    public static void testPrimality() {
        System.out.println("Testing PrimalityTest...");
        for (int i = 0; i < PRIME_TRUTH_TABLE.length; i++) {
            boolean expected = PRIME_TRUTH_TABLE[i] == 0;
            boolean result = PrimalityTest.isPrime(i);

            if (expected != result) {
                System.out.println("  Primality test failed: '" + i +
                        "'; expected " + expected + " but got " + result);
                return; // abort further testing
            }
        }
        System.out.println("  all primality tests passed!");
    }

    /**
     * Tests the {@link SieveOfEratosthenes#makeSieve(int)} method by making
     * a sieve and comparing it to the {@link #PRIME_TRUTH_TABLE}.
     */
    public static void testSieve() {
        System.out.println("Testing SieveOfEratosthenes...");

        int[] sieve = SieveOfEratosthenes.makeSieve(PRIME_TRUTH_TABLE.length);

        for (int i = 0; i < PRIME_TRUTH_TABLE.length; i++) {
            boolean expected = PRIME_TRUTH_TABLE[i] == 0;
            boolean result = sieve[i] == 0;

            if (expected != result) {
                System.out.println("  Sieve of Eratosthenes test failed: '" +
                        i + "'; expected " + expected + " but got " + result);
                return; // abort further testing
            }
        }
        System.out.println("  all Sieve of Eratosthenes tests passed!");
    }

    /**
     * Uses the Collatz truth table to test the
     * {@link Collatz#recursiveSequence(int)} method.
     */
    public static void testRecursiveCollatzSequence() {
        System.out.println("Testing Recursive Collatz Sequence...");

        for (int n = 10; n < COLLATZ_SEQUENCE_TRUTH_TABLE.length; n++) {
            String expected = COLLATZ_SEQUENCE_TRUTH_TABLE[n];
            String actual = Collatz.recursiveSequence(n).trim();
            if (!expected.equals(actual)) {
                System.out.println("Recursive Collatz Sequence test failed " +
                        "for n=" + n + "\nexpected: \n" + expected +
                        "\nactual:   \n" + actual);
                return; // abort further testing
            }
        }

        System.out.println("  all recursive Collatz Sequence tests passed.");
    }

    /**
     * Uses the Collatz truth table to test the
     * {@link Collatz#iterativeSequence(int)} method.
     */
    public static void testIterativeCollatzSequence() {
        System.out.println("Testing Iterative Collatz Sequence...");

        for (int n = 10; n < COLLATZ_SEQUENCE_TRUTH_TABLE.length; n++) {
            String expected = COLLATZ_SEQUENCE_TRUTH_TABLE[n];
            String actual = Collatz.iterativeSequence(n).trim();
            if (!expected.equals(actual)) {
                System.out.println("Iterative Collatz Sequence test failed " +
                        "for n=" + n + "\nexpected: \n" + expected +
                        "\nactual:   \n" + actual);
                return; // abort further testing
            }
        }

        System.out.println("  all iterative Collatz Sequence tests passed.");
    }


    /**
     * Uses the Pair SubsetSum truth table to test the
     * {@link SubsetSum#pairSubsetSum(int[], int)} method.
     */
    public static void testPairSubsetSum() {
        System.out.println("Testing Pair Subset Sum...");

       for (int n = 0; n < PAIR_SUBSET_SUM_TRUTH_TABLE.length; n++) {
           /* every string in the PAIR_SUBSET_SUM_TRUTH_TABLE
               has the following format:
               target - follows by the expected subset
               Example: 13 = [2, 11]
           */
           String testcase = PAIR_SUBSET_SUM_TRUTH_TABLE[n];
           String[] tokens = testcase.split("=");
           // extracting target number
           int x = Integer.valueOf(tokens[0].trim());
           // extracting expected subset
           String expected = tokens[1].trim();
           // invoking pairSubsetSum method
           int[] actual = SubsetSum.pairSubsetSum(SORTED_ARRAY, x);
           String strActual = Arrays.toString(actual);
           if (!expected.equals(strActual)) {
               System.out.println("Pair Subset Sum test failed " +
                       "for n=" + n + "\nexpected: \n" + expected +
                       "\nactual:   \n" + strActual);
               return; // abort further testing
           }
       }

        System.out.println("  all pair subset sum tests passed.");
    }

    /**
     * Tests each of the 5 activities from this lab.
     *
     * @param args Command line arguments; ignored.
     */
    public static void main(String[] args) {
        testPrimality();

        testSieve();

        testRecursiveCollatzSequence();

        testIterativeCollatzSequence();

        testPairSubsetSum();
    }
}
